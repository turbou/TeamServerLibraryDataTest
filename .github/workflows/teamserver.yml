name: Launch TeamServer Container

on:
  workflow_dispatch:
    inputs:
      instance_id:
        description: 'List of EC2 Instance ID'
        required: true
        type: string
        default: 'i-0df6b98aa8d86e49d'
      eop_version:
        description: '3.12.0.13568004691'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  update_file:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ap-northeast-1

      - name: Update EOP Version
        run: |
          aws ssm send-command \
            --instance-ids "${{ github.event.inputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"sudo sed -i 's#EOP_VERSION=.*\$#EOP_VERSION=${{ github.event.inputs.eop_version }}#' /root/git/TeamServerLibraryDataTest/eop/.env\"]" \
            --output text
          echo "Successfully sent command to update file on instance: ${{ steps.get_instance_id.outputs.INSTANCE_ID }}"

      - name: Up TeamServer Container
        id: teamserver_up
        run: |
          aws ssm send-command \
            --instance-ids "${{ github.event.inputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"sudo -i bash -c 'cd /root/git/TeamServerLibraryDataTest/eop && docker-compose -p eop up'\"]" \
            --output text
          echo "Successfully sent command to launch TeamServer on instance: ${{ steps.get_instance_id.outputs.INSTANCE_ID }}"

      - name: Wait for TeamServer to start
        id: wait_for_startup
        run: |
          MAX_RETRIES=20
          SLEEP_SECONDS=30
          for i in $(seq 1 $MAX_RETRIES); do
            LOGS=$(docker-compose -p eop logs teamserver)
            if echo "$LOGS" | grep -q " started on "; then
              echo "TeamServer started successfully."
              break
            fi
            echo "Waiting for TeamServer to start... (Attempt $i/$MAX_RETRIES)"
            sleep $SLEEP_SECONDS
            if [ $i -eq $MAX_RETRIES ]; then
              echo "TeamServer did not start within the expected time."
              exit 1
            fi
          done

