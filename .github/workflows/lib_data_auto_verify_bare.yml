name: Library Data Auto-Validation on Bare-metal

on:
  workflow_dispatch:
    inputs:
      instance_id:
        description: 'EC2 Instance ID'
        required: true
        type: string
        default: 'i-0d3fdfef1d70fecfe'
      sh_filename:
        description: 'Installer FileName e.g., Contrast-3.12.2.14624363708-NO-CACHE.sh'
        required: true
        type: string
      lic_filename:
        description: 'License FileName e.g., contrast-12-31-2025.lic'
        required: true
        type: string
        default: 'contrast-12-31-2025.lic'
      lib_filename:
        description: 'Lib FileName e.g., Contrast-Data-Export-202504211116.zip'
        required: false
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  lib_data_auto_verify:
    runs-on: ubuntu-latest
    steps:
      - name: Output Input Parameters
        run: |
          echo "--------------- Input Parameters ---------------"
          echo "EC2 Instance Id    : ${{ github.event.inputs.instance_id}}"
          echo "Installer FileName : ${{ github.event.inputs.sh_filename }}"
          echo "License FileName   : ${{ github.event.inputs.lic_filename }}"
          echo "------------------------------------------------"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ap-northeast-1

      - name: CleanUp
        id: clean_up
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ github.event.inputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"sudo rm -fr /opt/contrast\"]" \
            --output json | jq -r '.Command.CommandId')
          echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_OUTPUT
          echo "Successfully sent command to clean up on instance: ${{ github.event.inputs.instance_id }}"

      - name: Wait for CleanUp Completion Check
        id: wait_command_for_download_installer
        run: |
          COMMAND_ID="${{ steps.clean_up.outputs.COMMAND_ID }}"
          echo "Waiting for command ID: $COMMAND_ID to complete..."
          while true; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ github.event.inputs.instance_id }}" \
              --output json | jq -r '.Status')
            echo "Current Status: $STATUS"
            if [[ "$STATUS" == "Success" || "$STATUS" == "Failed" || "$STATUS" == "Cancelled" || "$STATUS" == "TimedOut" ]]; then
              echo "Command execution finished with status: $STATUS"
              break
            fi
            sleep 30
          done

      - name: Get Instance Type, Private IP and Elastic IP
        id: get_instance_details
        run: |
          INSTANCE_TYPE=$(aws ec2 describe-instances --instance-ids "${{ github.event.inputs.instance_id }}" --query 'Reservations[*].Instances[*].InstanceType' --output text)
          EIP=$(aws ec2 describe-addresses --filters "Name=instance-id,Values=${{ github.event.inputs.instance_id }}" --query 'Addresses[*].PublicIp' --output text)
          PIP=$(aws ec2 describe-instances --instance-ids "${{ github.event.inputs.instance_id }}" --query 'Reservations[*].Instances[*].PrivateIpAddress' --output text)
          echo "--------------- Instance Information ---------------"
          echo "EC2 Instance Type: $INSTANCE_TYPE"
          echo "Private IP       : $PIP"
          echo "Elastic IP       : $EIP"
          echo "------------------------------------------------"
          aws ssm send-command \
            --instance-ids "${{ github.event.inputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"sudo sed -i -e 's#INSTANCE_ID=.*\$#INSTANCE_ID=${{ github.event.inputs.instance_id }}#' -e 's#INSTANCE_TYPE=.*\$#INSTANCE_TYPE=$INSTANCE_TYPE#' -e 's#EIP=.*\$#EIP=$EIP#' -e 's#PIP=.*\$#PIP=$PIP#' -e 's#SH_FILE_NAME=.*\$#SH_FILE_NAME=${{ github.event.inputs.sh_filename }}#' -e 's#LIC_FILE_NAME=.*\$#LIC_FILE_NAME=${{ github.event.inputs.lic_filename }}#' /root/git/TeamServerLibraryDataTest/log_monitor_bare/.env\"]" \
            --output text
          echo "PIP=$PIP" >> $GITHUB_OUTPUT
          echo "EIP=$EIP" >> $GITHUB_OUTPUT
          echo "Successfully sent command to update file on instance: ${{ github.event.inputs.instance_id }}"

      - name: Reconfigure Installer Filename
        run: |
          aws ssm send-command \
            --instance-ids "${{ github.event.inputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"sudo sed -i 's#FILE_NAME=.*\$#FILE_NAME=${{ github.event.inputs.sh_filename }}#' /root/git/TeamServerLibraryDataTest/playwright_dl_installer/installer.env\"]" \
            --output text
          echo "Successfully sent command to update file on instance: ${{ github.event.inputs.instance_id }}"

      - name: Download Installer via Playwright Container
        id: installer_download
        run: |
          aws ssm send-command \
            --instance-ids "${{ github.event.inputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"sudo -i bash -c 'cd /root/git/TeamServerLibraryDataTest/playwright_dl_installer && docker-compose run --rm playwright_dl_installer'\"]" \
            --output text
          echo "Successfully sent command to download installer file on instance: ${{ github.event.inputs.instance_id }}"

      - name: Installer Download Completion Check
        id: check_for_installer_download
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ github.event.inputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"sudo -i bash -c 'cd /root/git/TeamServerLibraryDataTest/playwright_dl_installer && ./md5sum_check.sh ${{ github.event.inputs.sh_filename }}'\"]" \
            --output json | jq -r '.Command.CommandId')
          echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_OUTPUT
          echo "Successfully sent command to confirm Installer Downloaded on instance: ${{ github.event.inputs.instance_id }}"

      - name: Wait for Installer Download Completion Check
        id: wait_command_for_download_installer
        run: |
          COMMAND_ID="${{ steps.check_for_installer_download.outputs.COMMAND_ID }}"
          echo "Waiting for command ID: $COMMAND_ID to complete..."
          while true; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ github.event.inputs.instance_id }}" \
              --output json | jq -r '.Status')
            echo "Current Status: $STATUS"
            if [[ "$STATUS" == "Success" || "$STATUS" == "Failed" || "$STATUS" == "Cancelled" || "$STATUS" == "TimedOut" ]]; then
              echo "Command execution finished with status: $STATUS"
              break
            fi
            sleep 30
          done

      - name: Download License File via Playwright Container
        id: license_download
        run: |
          aws ssm send-command \
            --instance-ids "${{ github.event.inputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"sudo -i bash -c 'cd /root/git/TeamServerLibraryDataTest/playwright_dl_license && docker-compose run --rm playwright_dl_license'\"]" \
            --output text
          echo "Successfully sent command to download license file on instance: ${{ github.event.inputs.instance_id }}"

      - name: License File Download Completion Check
        id: check_for_license_download
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ github.event.inputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"sudo -i bash -c 'cd /root/git/TeamServerLibraryDataTest/playwright_dl_license && ./md5sum_check.sh ${{ github.event.inputs.lic_filename }}'\"]" \
            --output json | jq -r '.Command.CommandId')
          echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_OUTPUT
          echo "Successfully sent command to confirm License File Downloaded on instance: ${{ github.event.inputs.instance_id }}"

      - name: Wait for License File Download Completion Check
        id: wait_command_for_download_license
        run: |
          COMMAND_ID="${{ steps.check_for_license_download.outputs.COMMAND_ID }}"
          echo "Waiting for command ID: $COMMAND_ID to complete..."
          while true; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ github.event.inputs.instance_id }}" \
              --output json | jq -r '.Status')
            echo "Current Status: $STATUS"
            if [[ "$STATUS" == "Success" || "$STATUS" == "Failed" || "$STATUS" == "Cancelled" || "$STATUS" == "TimedOut" ]]; then
              echo "Command execution finished with status: $STATUS"
              break
            fi
            sleep 30
          done

      - name: Reconfigure response.varfile
        run: |
          PIP="${{ steps.get_instance_details.outputs.PIP }}"
          aws ssm send-command \
            --instance-ids "${{ github.event.inputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"sudo sed -i -e 's#licenseFileLocation=.*\$#licenseFileLocation=/opt/contrast/work/${{ github.event.inputs.lic_filename }}#' -e 's#teamserver_url=.*\$#teamserver_url=http://$PIP/Contrast#' /root/git/TeamServerLibraryDataTest/bare-metal/response.varfile\"]" \
            --output text
          echo "PIP=$PIP" >> $GITHUB_OUTPUT
          echo "EIP=$EIP" >> $GITHUB_OUTPUT
          echo "Successfully sent command to update file on instance: ${{ github.event.inputs.instance_id }}"

      - name: Install Contrast
        id: install_contrast
        run: |
          aws ssm send-command \
            --instance-ids "${{ github.event.inputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"sudo -i bash -c 'chmod a+x /opt/contrast/work/${{ github.event.inputs.sh_filename }} && /opt/contrast/work/${{ github.event.inputs.sh_filename }} -varfile /root/git/TeamServerLibraryDataTest/bare-metal/response.varfile -overwrite -q'\"]" \
            --output text
          echo "Successfully sent command to Install Contrast on instance: ${{ github.event.inputs.instance_id }}"

      - name: TeamServer Running Status Check
        id: check_for_startup
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ github.event.inputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"sudo -i bash -c 'cd /root/git/TeamServerLibraryDataTest/bare && ./started_check.sh'\"]" \
            --output json | jq -r '.Command.CommandId')
          echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_OUTPUT
          echo "Successfully sent command to confirm TeamServer started on instance: ${{ github.event.inputs.instance_id }}"

      - name: Wait for TeamServer Running Status Check
        id: wait_command_for_started
        run: |
          COMMAND_ID="${{ steps.check_for_startup.outputs.COMMAND_ID }}"
          echo "Waiting for command ID: $COMMAND_ID to complete..."
          while true; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ github.event.inputs.instance_id }}" \
              --output json | jq -r '.Status')
            echo "Current Status: $STATUS"
            if [[ "$STATUS" == "Success" || "$STATUS" == "Failed" || "$STATUS" == "Cancelled" || "$STATUS" == "TimedOut" ]]; then
              echo "Command execution finished with status: $STATUS"
              break
            fi
            sleep 30
          done

      - name: Other Container Startup
        id: other_container_up
        run: |
          aws ssm send-command \
            --instance-ids "${{ github.event.inputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"sudo -i bash -c 'cd /root/git/TeamServerLibraryDataTest/bare && docker-compose -p bare up'\"]" \
            --output text
          echo "Successfully sent command to launch other container on instance: ${{ github.event.inputs.instance_id }}"

      - name: Sleep for Waiting Container StartUp 30 seconds
        run: sleep 30s
        shell: bash

      - name: Hub Access Off
        id: hub_access_off
        run: |
          aws ssm send-command \
            --instance-ids "${{ github.event.inputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"sudo -i bash -c 'cd /root/git/TeamServerLibraryDataTest/playwright_hub_off && docker-compose -p bare run --rm playwright_hub_off'\"]" \
            --output text
          echo "Successfully sent command to hub access off on instance: ${{ github.event.inputs.instance_id }}"

      - name: Create Organization
        id: create_organization
        run: |
          aws ssm send-command \
            --instance-ids "${{ github.event.inputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"sudo -i bash -c 'cd /root/git/TeamServerLibraryDataTest/playwright_create_org && docker-compose -p bare run --rm playwright_create_org'\"]" \
            --output text
          echo "Successfully sent command to create organization on instance: ${{ github.event.inputs.instance_id }}"

      - name: Reconfigure Library Data Filename
        run: |
          aws ssm send-command \
            --instance-ids "${{ github.event.inputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[\"sudo sed -i 's#FILE_NAME=.*\$#FILE_NAME=${{ github.event.inputs.lib_filename }}#' /root/git/TeamServerLibraryDataTest/playwright_dl_lib_data/lib_data.env\"]" \
            --output text
          echo "Successfully sent command to update file on instance: ${{ github.event.inputs.instance_id }}"

#      - name: Download Library Data via Playwright Container
#        id: library_data_download
#        run: |
#          aws ssm send-command \
#            --instance-ids "${{ github.event.inputs.instance_id }}" \
#            --document-name "AWS-RunShellScript" \
#            --parameters "commands=[\"sudo -i bash -c 'cd /root/git/TeamServerLibraryDataTest/playwright_dl_lib_data && docker-compose -p playwright up'\"]" \
#            --output text
#          echo "Successfully sent command to download lib data file on instance: ${{ github.event.inputs.instance_id }}"
#
#      - name: Library Data Download Completion Check
#        id: check_for_lib_download
#        run: |
#          COMMAND_ID=$(aws ssm send-command \
#            --instance-ids "${{ github.event.inputs.instance_id }}" \
#            --document-name "AWS-RunShellScript" \
#            --parameters "commands=[\"sudo -i bash -c 'cd /root/git/TeamServerLibraryDataTest/playwright_dl_lib_data && ./md5sum_check.sh ${{ github.event.inputs.lib_filename }}'\"]" \
#            --output json | jq -r '.Command.CommandId')
#          echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_OUTPUT
#          echo "Successfully sent command to confirm Library Downloaded on instance: ${{ github.event.inputs.instance_id }}"
#
#      - name: Wait for Library Data Download Completion Check
#        id: wait_command_for_download
#        run: |
#          COMMAND_ID="${{ steps.check_for_lib_download.outputs.COMMAND_ID }}"
#          echo "Waiting for command ID: $COMMAND_ID to complete..."
#          while true; do
#            STATUS=$(aws ssm get-command-invocation \
#              --command-id "$COMMAND_ID" \
#              --instance-id "${{ github.event.inputs.instance_id }}" \
#              --output json | jq -r '.Status')
#            echo "Current Status: $STATUS"
#            if [[ "$STATUS" == "Success" || "$STATUS" == "Failed" || "$STATUS" == "Cancelled" || "$STATUS" == "TimedOut" ]]; then
#              echo "Command execution finished with status: $STATUS"
#              aws ssm send-command \
#                --instance-ids "${{ github.event.inputs.instance_id }}" \
#                --document-name "AWS-RunShellScript" \
#                --parameters "commands=[\"sudo -i bash -c 'docker-compose -p playwright down --volumes'\"]" \
#                --output text
#              break
#            fi
#            sleep 30
#          done
#
#      - name: Unzip Library Data File
#        id: unzip_library_data
#        run: |
#          COMMAND_ID=$(aws ssm send-command \
#            --instance-ids "${{ github.event.inputs.instance_id }}" \
#            --document-name "AWS-RunShellScript" \
#            --parameters "commands=[\"sudo -i bash -c 'cd /root/git/TeamServerLibraryDataTest/eop && ./unzip.sh ${{ github.event.inputs.lib_filename }}'\"]" \
#            --output json | jq -r '.Command.CommandId')
#          echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_OUTPUT
#          echo "Successfully sent command to Unzip Library Data on instance: ${{ github.event.inputs.instance_id }}"
#
#      - name: Wait for Unzip Library Data File
#        id: wait_command_for_unzip
#        run: |
#          COMMAND_ID="${{ steps.unzip_library_data.outputs.COMMAND_ID }}"
#          echo "Waiting for command ID: $COMMAND_ID to complete..."
#          while true; do
#            INVOCATION=$(aws ssm get-command-invocation \
#              --command-id "$COMMAND_ID" \
#              --instance-id "${{ github.event.inputs.instance_id }}" \
#              --output json)
#            STATUS=$(echo "$INVOCATION" | jq -r '.Status')
#            echo "Current Status: $STATUS"
#            if [[ "$STATUS" == "Success" || "$STATUS" == "Failed" || "$STATUS" == "Cancelled" || "$STATUS" == "TimedOut" ]]; then
#              EXIT_CODE=$(echo "$INVOCATION" | jq -r '.CommandPlugins[0].Output.ExitCode')
#              echo "Command execution finished with status: $STATUS, Exit Code: $EXIT_CODE"
#              if [[ "$EXIT_CODE" -eq 0 ]]; then
#                echo "Command succeeded with exit code 0."
#              else
#                echo "Command finished successfully but with a non-zero exit code: $EXIT_CODE."
#                exit 1
#              fi
#              break
#            fi
#            sleep 30
#          done
#
#      - name: Restart TeamServer Container
#        id: teamserver_restart
#        run: |
#          aws ssm send-command \
#            --instance-ids "${{ github.event.inputs.instance_id }}" \
#            --document-name "AWS-RunShellScript" \
#            --parameters "commands=[\"sudo -i bash -c 'docker-compose -p eop restart teamserver'\"]" \
#            --output text
#          echo "Successfully sent command to Restart TeamServer on instance: ${{ github.event.inputs.instance_id }}"
#
#      - name: Log Monitor Startup
#        id: log_monitor_start
#        run: |
#          aws ssm send-command \
#            --instance-ids "${{ github.event.inputs.instance_id }}" \
#            --document-name "AWS-RunShellScript" \
#            --parameters "commands=[\"sudo -i bash -c 'cd /root/git/TeamServerLibraryDataTest/log_monitor && docker-compose up'\"]" \
#            --output text
#          echo "Successfully sent command to Start Log Monitor on instance: ${{ github.event.inputs.instance_id }}"

